class Solution {
    int[][] direction = {{0,1}, {1,0}, {0,-1}, {-1,0}};
    
    private void dfs(int r, int c, char[][] arr, int m, int n) {
        arr[r][c] = '0';
        for (int[] num : direction) {
            int newRow = num[0] + r;
            int newCol = num[1] + c;
            if (newRow >= 0 && newCol >= 0 && newRow < m && newCol < n && arr[newRow][newCol] == '1') {
                dfs(newRow, newCol, arr, m, n);
            }
        }
    }

    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int island = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == '1') {
                    island++;
                    dfs(i, j, grid, m, n);
                }
            }
        }
        return island;
    }
}
